{% extends 'base.html' %}
{% block body %}
  <style type="text/css">
  </style>
  {% set game_width = 500 %}
  {% set game_height = 300 %}
  <svg id=soccer_field width={{ game_width }} height={{ game_height }} 
       style="background-color:white;">

    <rect x=20 y=130 height=40 width=10 fill=red />
    <rect x=460 y=130 height=40 width=10 fill=blue />

    <text x=50 y=50 id='R1'>R1</text>
    <text x=50 y=150 id='R2'>R2</text>
    <text x=50 y=250 id='R3'>R3</text>

    <text x=430 y=50 id='B1'>B1</text>
    <text x=430 y=150 id='B2'>B2</text>
    <text x=430 y=250 id='B3'>B3</text>
    
    <text x=244 y=150 id='O'>O</text>
  </svg><br/>
  <script>
    function Robot(name) {
      this.o = document.getElementById(name);
      this.robots.push(this);
    }
    Robot.prototype.robots = [];
    // returns true if the boxes intersect
    function BoxesIntersect(b1, b2) {
      if (b2.x > b1.x + b1.width - 1) {
        return false;
      }
      if (b2.x + b2.width - 1 < b1.x) {
        return false;
      }
      if (b2.y > b1.y + b1.height - 1) {
        return false;
      }
      if (b2.y + b2.height - 1 < b1.y) {
        return false;
      }
      return true;
    }
    // returns the first robot that intersects box
    // only robots other than "exclude" are considered
    // returns null if not found
    function HitsRobotExcluding(box, exclude) {
      var robots = Robot.prototype.robots;
      for (var i = 0; i < robots.length; i++) {
        var robot = robots[i];
        if (robot == exclude) {
          continue;
        }
        var b2 = robot.o.getBBox();
        if (!BoxesIntersect(b2, box)) {
          continue;
        }
        return robot;
      }
      return null;
    }
    // returns the first bounding box of any robot that intersects box
    // only robots other than "this" are considered
    // returns null if not found
    Robot.prototype.HitsRobot = function(box) {
      var r = HitsRobotExcluding(box, this);
      if (r == null) {
        return null;
      }
      console.log(this.o.getAttribute('id') + ' hit ' + 
                  r.o.getAttribute('id'));
      return r.o.getBBox();
    }
    Robot.prototype.up = function() {
      var amount_to_move = 10;
      var myBox = this.o.getBBox();
      var baseline_correction = parseInt(this.o.getAttribute('y')) - myBox.y;
      myBox.y -= amount_to_move;
      if (myBox.y < 0) {
        myBox.y = 0;
      }
      var b2 = this.HitsRobot(myBox);
      if (b2 != null) {
        myBox.y = b2.y + b2.height;
      }
      var ballBox = BALL.up(this, myBox);
      if (ballBox != null) {
        myBox.y = ballBox.y + ballBox.height;
      }
      this.o.setAttribute('y', myBox.y + baseline_correction);
    }
    Robot.prototype.down = function() {
      var amount_to_move = 10;
      var myBox = this.o.getBBox();
      var baseline_correction = parseInt(this.o.getAttribute('y')) - myBox.y;
      myBox.y += amount_to_move;
      if (myBox.y + myBox.height > {{ game_height }}) {
        myBox.y = {{ game_height }} - myBox.height;
      }
      b2 = this.HitsRobot(myBox);
      if (b2 != null) {
        myBox.y = b2.y - myBox.height;
      }
      var ballBox = BALL.down(this, myBox);
      if (ballBox != null) {
        myBox.y = ballBox.y - myBox.height;
      }
      this.o.setAttribute('y', myBox.y + baseline_correction);
    }
    Robot.prototype.left = function() {
      var amount_to_move = 10;
      var myBox = this.o.getBBox();
      myBox.x -= amount_to_move;
      if (myBox.x < 0) {
        myBox.x = 0;
      }
      b2 = this.HitsRobot(myBox);
      if (b2 != null) {
        myBox.x = b2.x + b2.width;
      }
      var ballBox = BALL.left(this, myBox);
      if (ballBox != null) {
        myBox.x = ballBox.x + ballBox.width;
      }
      this.o.setAttribute('x', myBox.x);
    }
    Robot.prototype.right = function() {
      var amount_to_move = 10;
      var myBox = this.o.getBBox();
      myBox.x += amount_to_move;
      if (myBox.x + myBox.width > {{ game_width }}) {
        myBox.x = {{ game_width }} - myBox.width;
      }
      b2 = this.HitsRobot(myBox);
      if (b2 != null) {
        myBox.x = b2.x - myBox.width;
      }
      var ballBox = BALL.right(this, myBox);
      if (ballBox != null) {
        myBox.x = ballBox.x - myBox.width;
      }
      this.o.setAttribute('x', myBox.x);
    }
    // Note: this works because we never set the position with the values
    // returned from here (otherwise it would be missing baseline_correction.
    // This is only for comparison to other locations.
    Robot.prototype.getLocation = function() {
      return this.o.getBBox();
    }
    function Ball() {
      this.o = document.getElementById('O');
    }
    Ball.prototype.getLocation = function() {
      return this.o.getBBox();
    }
    var BALL = new Ball();
    // Tell the ball robot wants to move to newRobotBox so the ball can move.
    // returns the (possibly new) bounding box of the ball if it blocks motion.
    // returns null if the ball is not in the way or moves freely.
    Ball.prototype.up = function(robot, newRobotBox) {
      var ballBox = this.o.getBBox();
      var baseline_correction = parseInt(this.o.getAttribute('y')) - ballBox.y;
      if (!BoxesIntersect(ballBox, newRobotBox)) {
        return null;
      }
      console.log(robot.o.getAttribute('id') + ' hit the ball');
      // move ballBox up
      ballBox.y = newRobotBox.y - ballBox.height;
      if (ballBox.y < 0) {
        ballBox.y = 0;
      }
      var r2 = HitsRobotExcluding(ballBox, robot);
      if (r2 != null) {
        ballBox.y = r2.o.getBBox().y + r2.o.getBBox().height;
      }
      this.o.setAttribute('y', ballBox.y + baseline_correction)
      if (ballBox.y != newRobotBox.y - ballBox.height) {
        return ballBox;
      }
      return null;
    }
    // Tell the ball robot wants to move to newRobotBox so the ball can move.
    // returns the (possibly new) bounding box of the ball if it blocks motion.
    // returns null if the ball is not in the way or moves freely.
    Ball.prototype.down = function(robot, newRobotBox) {
      var ballBox = this.o.getBBox();
      var baseline_correction = parseInt(this.o.getAttribute('y')) - ballBox.y;
      if (!BoxesIntersect(ballBox, newRobotBox)) {
        return null;
      }
      console.log(robot.o.getAttribute('id') + ' hit the ball');
      // move ballBox down
      ballBox.y = newRobotBox.y - newRobotBox.height;
      if (ballBox.y + ballBox.height > {{ game_height }}) {
        ballBox.y = {{ game_height }} - ballBox.height;
      }
      var r2 = HitsRobotExcluding(ballBox, robot);
      if (r2 != null) {
        ballBox.y = r2.o.getBBox().y - ballBox.height;
      }
      this.o.setAttribute('y', ballBox.y + baseline_correction)
      if (ballBox.y != newRobotBox.y - newRobotBox.height) {
        return ballBox;
      }
      return null;
    }
    // Tell the ball robot wants to move to newRobotBox so the ball can move.
    // returns the (possibly new) bounding box of the ball if it blocks motion.
    // returns null if the ball is not in the way or moves freely.
    Ball.prototype.left = function(robot, newRobotBox) {
      var ballBox = this.o.getBBox();
      if (!BoxesIntersect(ballBox, newRobotBox)) {
        return null;
      }
      console.log(robot.o.getAttribute('id') + ' hit the ball');
      // move ballBox left
      ballBox.x = newRobotBox.x - ballBox.width;
      if (ballBox.x < 0) {
        ballBox.x = 0;
      }
      var r2 = HitsRobotExcluding(ballBox, robot);
      if (r2 != null) {
        ballBox.x = r2.o.getBBox().x + r2.o.getBBox().width;
      }
      this.o.setAttribute('x', ballBox.x)
      if (ballBox.x != newRobotBox.x - ballBox.width) {
        return ballBox;
      }
      return null;
    }
    // Tell the ball robot wants to move to newRobotBox so the ball can move.
    // returns the (possibly new) bounding box of the ball if it blocks motion.
    // returns null if the ball is not in the way or moves freely.
    Ball.prototype.right = function(robot, newRobotBox) {
      var ballBox = this.o.getBBox();
      if (!BoxesIntersect(ballBox, newRobotBox)) {
        return null;
      }
      console.log(robot.o.getAttribute('id') + ' hit the ball');
      // move ballBox right
      ballBox.x = newRobotBox.x + newRobotBox.width;
      if (ballBox.x + ballBox.width > {{ game_width }}) {
        ballBox.x = {{ game_width }} - ballBox.width;
      }
      var r2 = HitsRobotExcluding(ballBox, robot);
      if (r2 != null) {
        ballBox.x = r2.o.getBBox().x - ballBox.width;
      }
      this.o.setAttribute('x', ballBox.x)
      if (ballBox.x != newRobotBox.x + newRobotBox.width) {
        return ballBox;
      }
      return null;
    }
  </script>
  <script>
    // Maximum of 3 minutes per game
    var max_millis_per_game = 1000 * 60 * 3;
    var millis_per_update = 200;
    var timer_millis = 0;
    var timer_tick = 0;
    var interval_timer;
    robots = {
    {% for p in robots %}
      '{{ p }}': new Robot('{{ p }}'),
    {% endfor %}
    };
    function updateAll() {
      {% for p in robots %}
        robots['{{ p }}'].update();
      {% endfor %}
      updateTimer();
    }
    function updateTimer() {
      timer_millis = timer_millis + millis_per_update;
      timer_tick = timer_tick + 1;
      if (timer_millis > max_millis_per_game) {
        stopGame("Game timed out.");
      }
    }
    interval_timer = setInterval(updateAll, millis_per_update);
    function stopGame(message) {
      clearInterval(interval_timer);
      console.log(message);
      console.log("game stopped.");
    }
  </script>
  {% for p in robots %}
    <script>
      robots['{{ p }}'].update = function() {
        {% autoescape false %}
          {{ robots[p].program }}
        {% endautoescape %}
      }
    </script>
  {% endfor %}
  Robots:<br/>
  {% for p in robots %}
    {{ p }} {{ robots[p].player_name }}<br/>
  {% endfor %}
{% endblock body %}
